<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on webber 筆記本</title>
    <link>https://webberwu7.github.io/WebberWuBlog/posts/</link>
    <description>Recent content in Posts on webber 筆記本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Fri, 16 Sep 2022 11:25:16 +0800</lastBuildDate><atom:link href="https://webberwu7.github.io/WebberWuBlog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wordpress 開發環境</title>
      <link>https://webberwu7.github.io/WebberWuBlog/posts/20220916-develop-wordpress/</link>
      <pubDate>Fri, 16 Sep 2022 11:25:16 +0800</pubDate>
      
      <guid>https://webberwu7.github.io/WebberWuBlog/posts/20220916-develop-wordpress/</guid>
      <description>Wordpress WordPress是一個以PHP和MySQL為平台的自由開源的部落格軟體和內容管理系統
WordPress具有外掛程式架構和模板系統
方便使用者開發客製化功能外掛和精美的主題模板
那麼如果要開發外掛或主題，就需要一個wordpress環境
今天這篇會紀錄如何在 Mac 系統中使用 docker 建立一個地端的 wordpress
開發的範例程式碼會在我的 github repo 中 webberwu7/wordpress-my-plugin-example
使用 docker-compose 一次將需要的服務啟動 如上面所描述的 wordpress 是以 php 和 mysql 為平台建置而成的
因此我們需要一個 mysql服務 和一個有php的網站建設
mysql服務 使用官方提供的 mysql:5.7
並且設定好連線的使用者帳號密碼與建立資料庫
wordpress 服務 使用官方提供的 wordpress:6.0.0-php8.0-apache (REF: wordpress docker hub)
未來如果 wordpress 要升級，可參考官方 tag 改成目標版本號
php 版本目前使用 8.0 如果未來要升級，可參考官方 tag 改成目標版本號
version: &amp;#39;3.3&amp;#39; services: db: image: mysql:5.7 restart: always environment: - MYSQL_DATABASE=wordpress-example - MYSQL_USER=wpExampleUser - MYSQL_PASSWORD=KhcwtBvD5ygAu - MYSQL_ROOT_PASSWORD=ybcM8Wrhr4MqX9ZpsWkQgdGH4NMghNcq - TZ=UTC ports: - 33060:3306 volumes: - .</description>
    </item>
    
    <item>
      <title>wordpress 插件開發筆記 (1) - 第一個插件</title>
      <link>https://webberwu7.github.io/WebberWuBlog/posts/20220915-develop-wordpress-plugin/</link>
      <pubDate>Thu, 15 Sep 2022 23:38:14 +0800</pubDate>
      
      <guid>https://webberwu7.github.io/WebberWuBlog/posts/20220915-develop-wordpress-plugin/</guid>
      <description>1. 基本結構 建立一個資料夾
並在裡面新增一個與資料夾同名的.php檔
做為插件的進入點
my-plugin └── my-plugin.php 在my-plugin.php加上插件的註解後
wordpress就能讀到該插件了
&amp;lt;?php /** * my-plugin * * Plugin Name: my-plugin * Description: 學習開發wordpress插件 * Version: 0.1 * Author: webber.wu */ 2. 使用autoload與namespace 隨著程式的開發未來檔案數量會越來越多
開發引用其他php就需要一堆require
又可能會遇到撞名的狀況
因此namespace與autoload的搭配就能讓code變成漂亮許多
資料夾中新增autoload.php
&amp;lt;?php spl_autoload_register(function ($class) { $prefix = &amp;#39;MyPlugin&amp;#39;; $base_dir = __DIR__ . &amp;#39;/app/&amp;#39;; $len = strlen($prefix); if (strncmp($prefix, $class, $len) !== 0) { // no, move to the next registered autoloader return; } // get the relative class name $relative_class = substr($class, $len); // replace the namespace prefix with the base directory, replace namespace // separators with directory separators in the relative class name, append // with .</description>
    </item>
    
    <item>
      <title>Python - Bigquery 筆記</title>
      <link>https://webberwu7.github.io/WebberWuBlog/posts/20220818-python-bigquery/</link>
      <pubDate>Thu, 18 Aug 2022 00:05:39 +0800</pubDate>
      
      <guid>https://webberwu7.github.io/WebberWuBlog/posts/20220818-python-bigquery/</guid>
      <description>需要套件 google-cloud-bigquery =&amp;gt; 串接bigquery的套件 pnadas =&amp;gt; 抓取後製作成dataframe的套件 db-dtype =&amp;gt; 轉換成dataframe的套件 pip3 install pip3 install google-cloud-bigquery pip3 install pandas pip3 install db-dtypes requirements.txt pip install -r requirements.txt # requirements.txt google-cloud-bigquery==3.3.1 pandas==1.4.3 db-dtypes==1.0.3 簡單使用方法 # 設定讀取 google credentials 的路徑 os.environ[&amp;#34;GOOGLE_APPLICATION_CREDENTIALS&amp;#34;] = &amp;#34;config/Crawler-Bigquery.json&amp;#34; # 啟動 bigquery client client = bigquery.Client() # 寫下你要 query 的語法 QUERY = ( &amp;#34;&amp;#34;&amp;#34; YOUR QUERY &amp;#34;&amp;#34;&amp;#34; ) query_job = client.query(QUERY) response = query_job.to_dataframe() print(response) </description>
    </item>
    
    <item>
      <title>菜雞部落客的hugo踩雷之路 ( 4 ) - 終於有頭像了</title>
      <link>https://webberwu7.github.io/WebberWuBlog/posts/20220816-make-a-hugo-blog-3/</link>
      <pubDate>Tue, 16 Aug 2022 12:19:14 +0800</pubDate>
      
      <guid>https://webberwu7.github.io/WebberWuBlog/posts/20220816-make-a-hugo-blog-3/</guid>
      <description>部落格作者頭像 在目前使用的 m10c 主題中有提到設定
Configuration In your config.toml file, define the following variables in params:
author: 作者的名字 description: 關於作者的簡單的敘述 avatar: 放置作者大頭照的路徑 menu_item_separator: 在目錄類型之間的分隔符號. HTML allowed (default: &amp;quot; - &amp;ldquo;) favicon: 使用favicon.ico的絕對路境 (default: &amp;ldquo;/favicon.ico&amp;rdquo;) 根據hugo的目錄設計
可以將靜態資源放在 static 資料夾中 (REF: Hugo Static Files)
By default, the static/ directory in the site project is used for all static files (e.g. stylesheets, JavaScript, images).
The static files are served on the site root path</description>
    </item>
    
    <item>
      <title>Laravel 升級之路 - 踩雷筆記</title>
      <link>https://webberwu7.github.io/WebberWuBlog/posts/20220813-laravel-upgrade-note/</link>
      <pubDate>Sat, 13 Aug 2022 16:15:34 +0800</pubDate>
      
      <guid>https://webberwu7.github.io/WebberWuBlog/posts/20220813-laravel-upgrade-note/</guid>
      <description>Laravel 升級之路 隨著laravel版本推陳出新
php 8 也已經於2020年末推出了
之前專案使用的 laravel lts版本是 laravel 6 將在2022.09邁入不再維護的日期
此篇文章是記錄將laravel 6 升級至 9 的過程中所執行的動作或遇到的錯誤
屬於一篇方便下次要再升級時可以回來翻找紀錄的地方
laravel 6 -&amp;gt; 7 參考連結:https://laravel.com/docs/7.x/upgrade#upgrade-7.0
跟著需求改完composer.json後
執行指令
composer update 第一坑: darkaonline/l5-swagger 需要將darkaonline/l5-swagger 升級至 &amp;ldquo;7.*&amp;rdquo;
參考連結: https://github.com/DarkaOnLine/L5-Swagger/wiki/Installation-&amp;amp;-Configuration
第二坑: Script @php artisan package:discover &amp;ndash;ansi handling the post-autoload-dump event returned with error code 255 參考連結: https://stackoverflow.com/questions/50840960/script-php-artisan-packagediscover-handling-the-post-autoload-dump-event-retur
其實laravel文件就有寫清楚了 https://laravel.com/docs/7.x/upgrade#symfony-5-related-upgrades
laravel 7 -&amp;gt; 8 參考連結:https://laravel.com/docs/8.x/upgrade
跟著需求改完composer.json後
執行指令
composer update 第一坑: swagger失敗 Required @OA\Info() not found 解法原因 https://github.com/zircote/swagger-php/blob/master/docs/guide/faq.md</description>
    </item>
    
    <item>
      <title>菜雞部落客的hugo踩雷之路 ( 3 ) - Content 與 layout 的愛恨情仇</title>
      <link>https://webberwu7.github.io/WebberWuBlog/posts/20220808-make-a-hugo-blog-2/</link>
      <pubDate>Mon, 08 Aug 2022 23:37:05 +0800</pubDate>
      
      <guid>https://webberwu7.github.io/WebberWuBlog/posts/20220808-make-a-hugo-blog-2/</guid>
      <description>文章參數配置 相信大家在創建文章時都會看的這樣的文字在最前方
--- title: &amp;#34;菜雞部落客的hugo踩雷之路 ( 3 ) - 優化網站&amp;#34; date: 2022-08-06T23:37:05+08:00 draft: true --- 這是hugo提供給使用者編輯page頁面時可設定的參數區
[REF: https://gohugo.io/variables/page/#page-level-params]
目前的理解是，這些參數可以自定義加入進去，然後看layout有沒有支援
那我們就先加入常見主題都支援的 tags 吧！
tags: [&amp;#39;hugo&amp;#39;] 就會看到文章中出現 tags 囉！ Content Organization hugo的 content有自己一套的組織規則
Content Sections 首先先來認識 Content Sections
[REF: Content Sections]
section有兩個定義 在content下面第一層的資料夾
資料夾裡面有 _index.md
參考下方結構圖
content └── blog &amp;lt;-- Section, 在content下面第一層的資料夾/ ├── funny-cats │ ├── mypost.md │ └── kittens &amp;lt;-- Section, 因為這個資料夾裡面有 _index.md │ └── _index.md └── tech &amp;lt;-- Section, 因為這個資料夾裡面有 _index.</description>
    </item>
    
    <item>
      <title>菜雞部落客的hugo踩雷之路 ( 2 ) - 部署到github上的靜態網站</title>
      <link>https://webberwu7.github.io/WebberWuBlog/posts/20220806-make-a-hugo-blog-1/</link>
      <pubDate>Sat, 06 Aug 2022 13:50:36 +0800</pubDate>
      
      <guid>https://webberwu7.github.io/WebberWuBlog/posts/20220806-make-a-hugo-blog-1/</guid>
      <description>靜態網站 所謂靜態網頁，便是指超文件標示語言HyperText Markup Language，簡稱：HTML。是一種常與CSS及Javascript配合製作的網站建置基礎技術，網頁以純文字或圖片形式為主，內容固定、互動性差，且無後台資料庫。一般來說只要是網頁副檔名為html或htm，皆可辦定為靜態網頁。因爲靜態網頁的穩定性和無需連接資料庫，因此能快速開啟頁面，也更容易被搜索引擎檢索，所以許多人在編寫網頁時會將動態網頁、影像、動畫等轉變成靜態方式，就是所謂的“偽靜態網頁”，來提高搜尋引擎的友善度進而達到排名優化。
[REF: 上網查到的說明]
GitHub Pages https://pages.github.com/
GitHub Pages是GitHub提供的一個網頁代管服務，於2008年推出[1][2]。可以用於存放靜態網頁，包括部落格、項目文檔[3][1]甚至整本書。[4]Jekyll軟體可以用於將文檔轉換成靜態網頁，該軟體提供了將網頁上傳到GitHub Pages的功能。[5]一般GitHub Pages的網站使用github.io的子域名，但是用戶也可以使用第三方域名。[6]
[REF: Wiki]
1. 先來 github 創建一個 repository 創建後先不要急著把專案上push上來
停在這個頁面一下，我們需要先把hugo的config設定好再來上傳
2. 設定hugo config baseUrl 至 github page Github Page的域名規則是這樣
https://{github帳號}.github.io/{剛剛創建的repository}
所以我們到config.toml檔設定
baseURL = &amp;#39;https://webberwu7.github.io/WebberWuBlog&amp;#39; 設定改好後 hugo 更新一下!
hugo 3. 推專案上 github 囉 先在hugo專案資料夾 git init 和設定對照的 github remote
git init git remote add origin git@github.com:webberwu7/WebberWuBlog.git commit &amp;amp; push
git add --all git commit -m &amp;#34;init hugo blog&amp;#34; git push origin master 4.</description>
    </item>
    
    <item>
      <title>菜雞部落客的hugo踩雷之路 ( 1 ) - 建立hugo專案與新增文章</title>
      <link>https://webberwu7.github.io/WebberWuBlog/posts/20220806-make-a-hugo-blog/</link>
      <pubDate>Sat, 06 Aug 2022 11:56:21 +0800</pubDate>
      
      <guid>https://webberwu7.github.io/WebberWuBlog/posts/20220806-make-a-hugo-blog/</guid>
      <description>什麼是 Hugo Hugo 是一個用 Go 編寫的靜態網站生成器，2013由 Steve Francia 原創，自 v0.14 (2015年) 由 Bjørn Erik Pedersen 主力開發[2]，並由全球各地的開發者和使用者提交貢獻。Hugo 以 Apache License 2.0 授權的開放原始碼專案。[3] Hugo 一般只需幾秒鐘就能生成一個網站（每頁少於 1 毫秒），被稱為「世界上最快的網站構建框架」，也使 Hugo 大受歡迎，成為最熱門的靜態網站生成器之一，被廣泛採用。 [REF: wiki]
所以如果我們的網站類型是靜態網站的話，非常推薦使用hugo來建置
1. 安裝Hugo 我這裡用的環境是 mac 且使用brew套件管理工具
brew install hugo 安裝後可以檢查一下版本 確認是否順利完成
hugo version hugo version 結果圖
➜ ~ hugo version hugo v0.101.0+extended darwin/amd64 BuildDate=unknown 2. 開啟一個hugo專案 安裝好後可以使用方便的 hugo 指令建立一個預設的 hugo網站
# hugo new site {資料夾名稱} hugo new site webberwu_hugo 可以看到新增完後會在資料夾中長出這些東西
├── archetypes ├── content ├── data ├── layouts ├── public │ ├── categories │ ├── css │ ├── make-a-hugo-blog │ ├── page │ └── tags ├── resources │ └── _gen ├── static └── themes └── hugo-theme-m10c # 下一步才會安裝的主題 剛新建時會是空的 3.</description>
    </item>
    
  </channel>
</rss>
