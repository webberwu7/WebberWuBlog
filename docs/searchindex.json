{"categories":[],"posts":[{"content":"議程 Day 1 Day 2 Day 3 我參加的講座筆記 這次參加的是 Day 3 的議程，主要想聽關於紅隊演練的議程\n701B \u0026ldquo;在家工作\u0026quot;到\u0026quot;隨時隨處工作\u0026rdquo; — 零信任方式下的後疫情時代數位化轉型, Zscaler, Aaron Tseng 零信任 在家工作\n員工從家裡存取公司服務都是安全的嗎？\n因次提出了要讓員工使用vpn連進公司內網的需求\n但是多了vpn就安全了嗎？\n只要有vpn進入後就可以在公司內網中四處搜尋\n因次要加上綁定身份的功能\nHR 連上vpn後只能使用 HR 相關的系統\nRD 連上vpn後只能使用 RD 相關的系統\n零攻擊面\n換證後只能看到自己有權限的服務\n檢查端點風險等級 會檢查目前電腦的安全機制，需要購安全才能連線\nZPA 取代 VPN (ZPA 是這家公司的產品)\n你要先連上他的雲(broker)，由這個雲去轉發存取服務\n所以在這個平台上設定好權限和過濾等資料即可避免使用者想去亂撈其他服務的狀況\n701F 打密碼太過時?安全地登入雲端與 SaaS 服務 的最新趨勢, HENNGE, 中込 剛 常見的攻擊手法\n社交工程攻擊 只要你有憑證你被攻擊時就會被偷走\n信箱zip\n釣魚真人信件\n解法\n如何驗證有憑證的使用者？ 綁定裝置憑證 如果裝置被害怎麼辦？ 多裝置驗證 如果PC端想要登入，此時需要手機驗證\n搭配單一登入入口 基礎的密碼 + 裝置憑證 ＋ 推播通知驗證\n結語 2022 的安全威脅趨勢是 『人』而不是系統\n案例: Lapsas$, Emotet, 網路釣魚\n透過 裝置驗證 可以有效解決人為錯誤問題\n701F 如何正確使用紅隊演練, 戴夫寇爾, 翁浩正 RED TEAM 市場在哪？ 高科技業 政府網站\n每個企業都需要屬於自己的資安\n不一定是直接抄別人就好\n每個公司都想做紅隊\n但是品質問題\n如果爛的紅隊就只是滲透測試報告而已\n什麼是紅隊？ 紅隊是全方位打擊而非指定主機攻擊\n弱掃 + 滲透 + 紅隊\n信任紅隊並接受結果\n不要什麼都不給打\n開案結案績效如何計算\n如何進行紅隊演練\n- 階段一: 初次合作 階段二: 資安成熟度成長中 階段三: 資安成熟度高 時間 揭露演練日期和時間 揭露演練時間並拉長日期 不限演練日期和時間 網路 固定IP位置 可用動態IP位置 全程使用動態IP位置以及使用網路服務作為跳板 範圍 以企業最常使用的網域，IP位置，雲端服務為主 除常見範圍，也納入設備，供應鏈，子公司，跨國辦公室 所有數位資產皆納入範圍 溝通 諾藍隊有任何疑問，可由紅隊提出說明 諾藍隊提出疑問，紅隊視情況說明 紅隊僅需告知重大漏洞，其餘資訊不提供 情境 以外網入侵為主 先以外網為主，後變換其他情境 視情況可從內網開始演練，並納入實體入侵，社交工程等方式 籃隊 監控但不阻擋 發現攻擊行為可以阻擋，多次阻擋成功後，再採取監控不阻擋的放行機制 發現攻擊立即阻擋，不必放行 紅隊演練開演前準備\n確認演練範圍 公司授權演練範圍，如網域,主機,子公司等 盤點高敏感資料主機 需避開的範圍,時段或手法 確認演練情境 從外部網路出發(外部系統) 從內部網路出發(內部資安事件) 演練之前遇到資安事件的情境類型 特定攻擊手法，如WIFI入侵, 實體入侵等 確認演練目標 盤點公司最在意的主機或資料是什麼 與核心目標有相依性的主機有哪些 曾經發生過事件的高危險主機 盤點重要基礎設施,核心系統,機密資料,特權帳號權限 專案怎麼合作 如何結案驗收\n資安廠商 攻擊的 方法論, 策略, 攻擊觀點的安全建議 詳細的 攻擊路徑, 漏洞說明 簡報交流 雙方攻防的想法 企業內部 回顧演練流程 重新調整資安策略 擬訂長期演練計畫 結語 從需求出發，思考為什麼我需要這個服務，我想要解決什麼問題 紅隊就是盟友，藉由演練盤點人員, 設備, 流程的問題 做好開案, 成案, 結案的準備，將資源發揮最大效益 701F 我真的適合執行紅隊演練嗎? 金融業的經驗分享, 金融業資安單位, 張哲銘 資通安全責任等級分級辦法 - 參考法條\n反正就是說分五等級 ABCDE 公司，每年要看自己哪一等做多少跟資安相關的檢查\n紅隊演練的專案規劃階段概要 廠商的遴選與合約要素 多組廠商遴選 演練原則 演練目標 紅隊演練人員組成 演練後 記錄演練時發生的時間序列圖 非常重要 (下圖為模擬圖並非真實發生) 結語 701A 真實風險與ATT\u0026amp;CK的鴻溝, 戴夫寇爾, 翁浩正 ATT\u0026amp;CK\nATT\u0026amp;CK® 是一個紀錄資安攻擊與情資分享的資料庫，也是紅隊與藍隊之間溝通的橋樑，市面上許多端點防禦軟體都使用 ATT\u0026amp;CK® 作為防護的標準。\nhttps://attack.mitre.org/\nREF: [ATT\u0026amp;CK®] 1 ATT\u0026amp;CK® 基本介紹\n金融業常見的 ATT\u0026amp;CK 手法\n知名的 APT10 組織攻擊手法\nDEVCORE 最常見的五種攻擊型態 結語 ATTACK MATRIC 只是一種考古題\n讓我們可以理解別人研究過的攻擊手法\n而防禦手法也並非去做到完全的防禦\n而是能夠將其在中發現後阻斷\n戰果 (?) 樓下參展廠商贈品超級多\n相片網址 CYBERSEC 2022 相簿網址\n","id":0,"section":"posts","summary":"議程 Day 1 Day 2 Day 3 我參加的講座筆記 這次參加的是 Day 3 的議程，主要想聽關於紅隊演練的議程 701B \u0026ldquo;在家工作\u0026quot;到\u0026quot;隨時隨處","tags":["conference"],"title":"CYBERSEC 2022 台灣資安大會","uri":"https://webberwu7.github.io/WebberWuBlog/2022/09/20220926-conference-cybersec2022/","year":"2022"},{"content":"Wordpress WordPress是一個以PHP和MySQL為平台的自由開源的部落格軟體和內容管理系統\nWordPress具有外掛程式架構和模板系統\n方便使用者開發客製化功能外掛和精美的主題模板\n那麼如果要開發外掛或主題，就需要一個wordpress環境\n今天這篇會紀錄如何在 Mac 系統中使用 docker 建立一個地端的 wordpress\n開發的範例程式碼會在我的 github repo 中 webberwu7/wordpress-my-plugin-example\n使用 docker-compose 一次將需要的服務啟動 如上面所描述的 wordpress 是以 php 和 mysql 為平台建置而成的\n因此我們需要一個 mysql服務 和一個有php的網站建設\nmysql服務 使用官方提供的 mysql:5.7\n並且設定好連線的使用者帳號密碼與建立資料庫\nwordpress 服務 使用官方提供的 wordpress:6.0.0-php8.0-apache (REF: wordpress docker hub)\n未來如果 wordpress 要升級，可參考官方 tag 改成目標版本號\nphp 版本目前使用 8.0 如果未來要升級，可參考官方 tag 改成目標版本號\nversion: '3.3' services: db: image: mysql:5.7 restart: always environment: - MYSQL_DATABASE=wordpress-example - MYSQL_USER=wpExampleUser - MYSQL_PASSWORD=KhcwtBvD5ygAu - MYSQL_ROOT_PASSWORD=ybcM8Wrhr4MqX9ZpsWkQgdGH4NMghNcq - TZ=UTC ports: - 33060:3306 volumes: - ./.db/data/mysql:/var/lib/mysql wordpress: depends_on: - db image: wordpress:6.0.0-php8.0-apache ports: - \u0026quot;8000:80\u0026quot; restart: always environment: WORDPRESS_DB_NAME: wordpress-example WORDPRESS_DB_HOST: db:3306 WORDPRESS_DB_USER: wpExampleUser WORDPRESS_DB_PASSWORD: KhcwtBvD5ygAu volumes: - ./.wordpress:/var/www/html 寫好docker-compose後下指令啟動\ndocker-compose up 如果順利啟動的話就會看到 wordpress 的引導安裝介面了\n安裝完成登入後，就能看到wordpress的後台介面囉\n將開發的插件放入目前運行中的 wordpress 在docker-compose中有使用 volume 功能\n所以可以將docker容器中的位置對照出來外面\n設定是放在目前位置下的 .wordpress 資料夾中\nvolumes: - ./.wordpress:/var/www/html 目前的資料夾結構\n. ├── db │ └── data ├── wordpress │ ├── wp-admin │ ├── wp-content │ ├── wp-includes │ ├── index.php │ ├── license.txt │ ├── readme.html │ ├── wp-activate.php │ ├── wp-blog-header.php │ ├── wp-comments-post.php │ ├── wp-config-docker.php │ ├── wp-config-sample.php │ ├── wp-config.php │ ├── wp-cron.php │ ├── wp-links-opml.php │ ├── wp-load.php │ ├── wp-login.php │ ├── wp-mail.php │ ├── wp-settings.php │ ├── wp-signup.php │ ├── wp-trackback.php │ └── xmlrpc.php ├── LICENSE ├── README.md └── docker-compose.yml wordpress 的插件會安裝在 wp-content -\u0026gt; plugins 中\n所以將開發的插件複製到這個位置他就會同步至 wordpress 然後自動讀取\n例如： 我們可以將 wordpress 插件開發筆記 (1) - 第一個插件 開發的插件加入其中\n├── wordpress ├── wp-admin └── wp-content └── plugins └── my-plugin 就可以看到wordpress的插件列表中出現我們自行開發的插件了\nWP-CLI WP-CLI是 WordPress 的官方命令行界面。 它可以讓你從終端機的介面下指令來快速管理 WordPress網站 、網站主題、網站插件等等。 這通常是當你 WordPress網站設計 玩到一定的程度之後會開始摸索研究的軟體，讓你晉升高級 WordPress網頁設計師，更便捷快速的管理你的 WordPress網站。\nREF: https://raise-up.com.tw/wordpress-tutorial/wp-cli-introduction.html/\n可是使用了 docker-compose 要如何自動執行wp-cli呢？\n因此要在 docker-compose.yaml 中加入 wordpress-cli 的服務去執行他\nwordpress-cli: depends_on: - db - wordpress user: \u0026quot;33:33\u0026quot; image: wordpress:cli environment: WORDPRESS_DB_NAME: wordpress-example WORDPRESS_DB_HOST: db:3306 WORDPRESS_DB_USER: wpExampleUser WORDPRESS_DB_PASSWORD: KhcwtBvD5ygAu command: \u0026gt; /bin/sh -c ' sleep 10; wp core install --path=/var/www/html \\ --url=\u0026quot;http://localhost:8000\u0026quot; \\ --title=\u0026quot;wordpress-example\u0026quot; \\ --admin_user=wpExampleUser \\ --admin_password=wpExampleUser \\ --admin_email=wp.example@example.com; wp theme install colormag --activate --allow-root; wp plugin install aryo-activity-log --activate --allow-root; ' volumes: - ./.wordpress:/var/www/html 這裡我簡單寫下兩個指令\nwp core install : 安裝wordpress 並設定網址,標題和管理員等資料 wp theme install : 安裝wordpress主題 wp plugin install : 安裝wordpress插件 ","id":1,"section":"posts","summary":"Wordpress WordPress是一個以PHP和MySQL為平台的自由開源的部落格軟體和內容管理系統 WordPress具有外掛程式架構和模板系統 方便使用","tags":["wordpress","docker"],"title":"Wordpress 開發環境","uri":"https://webberwu7.github.io/WebberWuBlog/2022/09/20220916-develop-wordpress/","year":"2022"},{"content":"1. 基本結構 建立一個資料夾\n並在裡面新增一個與資料夾同名的.php檔\n做為插件的進入點\nmy-plugin └── my-plugin.php 在my-plugin.php加上插件的註解後\nwordpress就能讀到該插件了\n\u0026lt;?php /** * my-plugin * * Plugin Name: my-plugin * Description: 學習開發wordpress插件 * Version: 0.1 * Author: webber.wu */ 2. 使用autoload與namespace 隨著程式的開發未來檔案數量會越來越多\n開發引用其他php就需要一堆require\n又可能會遇到撞名的狀況\n因此namespace與autoload的搭配就能讓code變成漂亮許多\n資料夾中新增autoload.php\n\u0026lt;?php spl_autoload_register(function ($class) { $prefix = 'MyPlugin'; $base_dir = __DIR__ . '/app/'; $len = strlen($prefix); if (strncmp($prefix, $class, $len) !== 0) { // no, move to the next registered autoloader return; } // get the relative class name $relative_class = substr($class, $len); // replace the namespace prefix with the base directory, replace namespace // separators with directory separators in the relative class name, append // with .php $file = $base_dir . str_replace('\\\\', '/', $relative_class) . '.php'; // if the file exists, require it if (file_exists($file)) { require_once $file; } }); 第4行 $prefix = 'MyPlugin'; 代表這個專案使用的前綴名稱是什麼 第6行 $base_dir = __DIR__ . '/app/'; 代表要autoload讀取的資料夾 回到my-plugin.php 加上require\n// autoload class object require __DIR__ . \u0026quot;/autoload.php\u0026quot;; 目前資料夾結構 my-plugin ├── autoload.php └── my-plugin.php 3. 在app資料夾中新增插件類別 由於上面autoload寫我們要讀取app資料夾中的物件\n所以我們需要在插件資料夾中新增app資料夾\n並在app資料夾中新增MyPlugin.php\n\u0026lt;?php namespace MyPlugin; class MyPlugin { public function __construct() { } public function plugin_init() { } } 目前資料夾結構 my-plugin ├── app │ └── MyPlugin.php ├── autoload.php └── my-plugin.php 4. 回到wordpress plugin寫下初始化物件 使用wordpress hook : plugins_loaded\n作為觸發初始化插件的進入點\nuse MyPlugin\\MyPlugin; // 讀取這個插件 add_action( 'plugins_loaded', function () { $plugin = new MyPlugin(); $plugin-\u0026gt;plugin_init(); return $plugin; } ); 5. 建立後台選單 接下來我們使用mvc的設計來切分每個功能的物件\n新增一個Controllers資料夾並且在裡面加上AdminPageController 負責管理後台頁面的事件 \u0026lt;?php namespace MyPlugin\\Controllers; class AdminPageController { public function __construct() { add_action('admin_menu', function () { // 建立選單 add_menu_page( '我的插件', '我的插件', 'manage_options', 'my-plugin-options', '', 'dashicons-email-alt', 99 ); }); } } 回到MyPlugin.php中將controller引入 use MyPlugin\\Controllers\\AdminPageController; class MyPlugin { protected $adminPageController; public function __construct() { $this-\u0026gt;adminPageController = new AdminPageController(); } public function plugin_init() { } } 登入wordpress後台將外掛啟用\n我的插件按鈕就出現了!!\n介紹一下 wp 的 add_menu_page 函式的細節 https://developer.wordpress.org/reference/functions/add_menu_page/\nadd_menu_page( string $page_title, // 點進該頁面所顯示的標題 string $menu_title, // 在選單目錄所顯示的標題 string $capability, // wp權限需求 string $menu_slug, // wp目錄的客製化網址設定 http://{你的網站}/wp-admin/{menu_slug} callable $callback = '', // 點擊後觸發的callback string $icon_url = '', // 顯示在目錄上的icon int|float $position = null // 目錄的座標位置參考上方連結詳細說明 ) add_menu_page( '我的插件', '我的插件', 'manage_options', 'my-plugin-options', '', 'dashicons-email-alt', 99 ); 目前資料夾結構 my-plugin ├── app │ ├── Controllers │ │ └── AdminPageController.php │ └── MyPlugin.php ├── autoload.php └── my-plugin.php 6. 定義方便使用的絕對路徑與網址 在my-plugin.php中加上define\n這邊定義了插件的絕對網址與插件的絕對路徑\n// define absolute url defined('MY_PLUGIN_ABS_PLUGIN_URL') || define('MY_PLUGIN_ABS_PLUGIN_URL', plugin_dir_url(__FILE__)); defined('MY_PLUGIN_ABS_PLUGIN_PATH') || define('MY_PLUGIN_ABS_PLUGIN_PATH', plugin_dir_path(__FILE__)); 7. 後台插件畫面 有了目錄按鈕後直接點下去會出現404查無此頁\n因此我們現在要在這個按鈕加上callback\nadd_action('admin_menu', function () { // 建立主選單 add_menu_page( '我的插件', '我的插件', 'manage_options', 'my-plugin-options', function () { $myPluginPagePath = MY_PLUGIN_ABS_PLUGIN_PATH . \u0026quot;public/admin/my-plugin-admin-page.php\u0026quot;; load_template($myPluginPagePath); }, 'dashicons-email-alt', 99 ); }); callback的function使用load_template的方式前後端分離\n可以使前端專心編寫指定路徑上的檔案即可\n不會讓controller中混雜 html js 等程式\n透過上方的code可以看到需要讀取插件資料夾/public/admin 中的 my-plugin-admin-page.php\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;MY PLUGIN PAGE\u0026lt;h1\u0026gt; \u0026lt;h1\u0026gt;hello world!!\u0026lt;h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","id":2,"section":"posts","summary":"1. 基本結構 建立一個資料夾 並在裡面新增一個與資料夾同名的.php檔 做為插件的進入點 my-plugin └── my-plugin.php 在my-plugin.php加上插件的註解後 wor","tags":["php","wordpress","plugin"],"title":"Wordpress 插件開發筆記 (1) - 第一個插件","uri":"https://webberwu7.github.io/WebberWuBlog/2022/09/20220915-develop-wordpress-plugin/","year":"2022"},{"content":"需要套件 google-cloud-bigquery =\u0026gt; 串接bigquery的套件 pnadas =\u0026gt; 抓取後製作成dataframe的套件 db-dtype =\u0026gt; 轉換成dataframe的套件 pip3 install pip3 install google-cloud-bigquery pip3 install pandas pip3 install db-dtypes requirements.txt pip install -r requirements.txt # requirements.txt google-cloud-bigquery==3.3.1 pandas==1.4.3 db-dtypes==1.0.3 簡單使用方法 # 設定讀取 google credentials 的路徑 os.environ[\u0026quot;GOOGLE_APPLICATION_CREDENTIALS\u0026quot;] = \u0026quot;config/Crawler-Bigquery.json\u0026quot; # 啟動 bigquery client client = bigquery.Client() # 寫下你要 query 的語法 QUERY = ( \u0026quot;\u0026quot;\u0026quot; YOUR QUERY \u0026quot;\u0026quot;\u0026quot; ) query_job = client.query(QUERY) response = query_job.to_dataframe() print(response) ","id":3,"section":"posts","summary":"需要套件 google-cloud-bigquery =\u0026gt; 串接bigquery的套件 pnadas =\u0026gt; 抓取後製作成dataframe的套件 db-dtype =\u0026gt; 轉換成dataframe的套件 pip3 install pip3 install google-cloud-bigquery pip3 install pandas pip3 install db-dtypes requirements.txt pip install","tags":["python","bigquery"],"title":"Python - Bigquery 筆記","uri":"https://webberwu7.github.io/WebberWuBlog/2022/08/20220818-python-bigquery/","year":"2022"},{"content":"部落格作者頭像 在目前使用的 m10c 主題中有提到設定\nConfiguration In your config.toml file, define the following variables in params:\nauthor: 作者的名字 description: 關於作者的簡單的敘述 avatar: 放置作者大頭照的路徑 menu_item_separator: 在目錄類型之間的分隔符號. HTML allowed (default: \u0026quot; - \u0026ldquo;) favicon: 使用favicon.ico的絕對路境 (default: \u0026ldquo;/favicon.ico\u0026rdquo;) 根據hugo的目錄設計\n可以將靜態資源放在 static 資料夾中 (REF: Hugo Static Files)\nBy default, the static/ directory in the site project is used for all static files (e.g. stylesheets, JavaScript, images).\nThe static files are served on the site root path\n(eg. if you have the file static/image.png you can access it using http://{server-url}/image.png, to include it in a document you can use ![Example image](/image.png) ).\n實作囉 將我的頭像圖片放到 static/images/avatar.jpg\n然後在config.toml中加入這些設定\n[params] author = 'webber' avatar = \u0026quot;images/avatar.jpg\u0026quot; description = '目前是一名後端工程師' ","id":4,"section":"posts","summary":"部落格作者頭像 在目前使用的 m10c 主題中有提到設定 Configuration In your config.toml file, define the following variables in params: author: 作者的名字 description: 關於作者的簡單的敘述 avatar: 放置作者大頭照的路徑 menu_item_separator: 在目錄類型之間的","tags":["hugo"],"title":"菜雞部落客的hugo踩雷之路 ( 4 ) - 終於有頭像了","uri":"https://webberwu7.github.io/WebberWuBlog/2022/08/20220816-make-a-hugo-blog-3/","year":"2022"},{"content":"Laravel 升級之路 隨著laravel版本推陳出新\nphp 8 也已經於2020年末推出了\n之前專案使用的 laravel lts版本是 laravel 6 將在2022.09邁入不再維護的日期\n此篇文章是記錄將laravel 6 升級至 9 的過程中所執行的動作或遇到的錯誤\n屬於一篇方便下次要再升級時可以回來翻找紀錄的地方\nlaravel 6 -\u0026gt; 7 參考連結:https://laravel.com/docs/7.x/upgrade#upgrade-7.0\n跟著需求改完composer.json後\n執行指令\ncomposer update 第一坑: darkaonline/l5-swagger 需要將darkaonline/l5-swagger 升級至 \u0026ldquo;7.*\u0026rdquo;\n參考連結: https://github.com/DarkaOnLine/L5-Swagger/wiki/Installation-\u0026amp;-Configuration\n第二坑: Script @php artisan package:discover \u0026ndash;ansi handling the post-autoload-dump event returned with error code 255 參考連結: https://stackoverflow.com/questions/50840960/script-php-artisan-packagediscover-handling-the-post-autoload-dump-event-retur\n其實laravel文件就有寫清楚了 https://laravel.com/docs/7.x/upgrade#symfony-5-related-upgrades\nlaravel 7 -\u0026gt; 8 參考連結:https://laravel.com/docs/8.x/upgrade\n跟著需求改完composer.json後\n執行指令\ncomposer update 第一坑: swagger失敗 Required @OA\\Info() not found 解法原因 https://github.com/zircote/swagger-php/blob/master/docs/guide/faq.md\n需要在加入namespace 和 空的class 且註解如果連在一起要連貫\n* @OA\\JsonContent( * @OA\\Property(property=\u0026quot;error\u0026quot;, type=\u0026quot;string\u0026quot;, * example=\u0026quot;Exception\u0026quot; * ), * ), * ), * ) * * * * @OA\\Post( * path=\u0026quot;/api/projects/{projectID}/export/statistical-report\u0026quot;, * security={{\u0026quot;Bearer\u0026quot;:{}}}, * operationId=\u0026quot;專案匯出統計報告\u0026quot;, * tags={\u0026quot;Export 匯出\u0026quot;,}, * summary=\u0026quot;專案匯出統計報告\u0026quot;, * description=\u0026quot;後台登入後，專案匯出統 不可以這樣做\n* @OA\\JsonContent( * @OA\\Property(property=\u0026quot;error\u0026quot;, type=\u0026quot;string\u0026quot;, * example=\u0026quot;Exception\u0026quot; * ), * ), * ), * ) */ /** * @OA\\Post( * path=\u0026quot;/api/projects/{projectID}/export/statistical-report\u0026quot;, * security={{\u0026quot;Bearer\u0026quot;:{}}}, * operationId=\u0026quot;專案匯出統計報告\u0026quot;, * tags={\u0026quot;Export 匯出\u0026quot;,}, * summary=\u0026quot;專案匯出統計報告\u0026quot;, * description=\u0026quot;後台登入後，專案匯出統 php 7.3 -\u0026gt; 8.0 安裝 php 8.0 這裡是mac local安裝php 8 brew install php@8.0 zshrc 更新 vi ~/.zshrc 加入下面這兩行\nexport PATH=\u0026quot;/usr/local/opt/php@8.0/bin:$PATH\u0026quot; export PATH=\u0026quot;/usr/local/opt/php@8.0/sbin:$PATH\u0026quot; 第一坑: kreait/laravel-firebase 需要升級 \u0026quot;kreait/laravel-firebase\u0026quot;: \u0026quot;^4.1\u0026quot;, 第二坑: tymon/jwt-auth 不支援php 8 先暫時換成這個\n\u0026quot;php-open-source-saver/jwt-auth\u0026quot;: \u0026quot;^1.4\u0026quot; laravel 8 -\u0026gt; 9 第一坑: league/flysystem-aws-s3-v3 需要升級 \u0026quot;league/flysystem-aws-s3-v3\u0026quot;: \u0026quot;^3.0.11\u0026quot;, 第二坑: Undefined constant Illuminate\\Http\\Request::HEADER_X_FORWARDED_ALL ","id":5,"section":"posts","summary":"Laravel 升級之路 隨著laravel版本推陳出新 php 8 也已經於2020年末推出了 之前專案使用的 laravel lts版本是 laravel 6 將在2022.09邁入不再維護的日期 此","tags":["php","laravel"],"title":"Laravel 升級之路 - 踩雷筆記","uri":"https://webberwu7.github.io/WebberWuBlog/2022/08/20220813-laravel-upgrade-note/","year":"2022"},{"content":"文章參數配置 相信大家在創建文章時都會看的這樣的文字在最前方\n--- title: \u0026quot;菜雞部落客的hugo踩雷之路 ( 3 ) - 優化網站\u0026quot; date: 2022-08-06T23:37:05+08:00 draft: true --- 這是hugo提供給使用者編輯page頁面時可設定的參數區\n[REF: https://gohugo.io/variables/page/#page-level-params]\n目前的理解是，這些參數可以自定義加入進去，然後看layout有沒有支援\n那我們就先加入常見主題都支援的 tags 吧！\ntags: ['hugo'] 就會看到文章中出現 tags 囉！ Content Organization hugo的 content有自己一套的組織規則\nContent Sections 首先先來認識 Content Sections\n[REF: Content Sections]\nsection有兩個定義 在content下面第一層的資料夾\n資料夾裡面有 _index.md\n參考下方結構圖\ncontent └── blog \u0026lt;-- Section, 在content下面第一層的資料夾/ ├── funny-cats │ ├── mypost.md │ └── kittens \u0026lt;-- Section, 因為這個資料夾裡面有 _index.md │ └── _index.md └── tech \u0026lt;-- Section, 因為這個資料夾裡面有 _index.md └── _index.md section 特色 hugo 會自動幫你把content下第一層 section 套用 list的模板\nContent Section vs Content Type\n使用section後hugo會自動把文章的section當成他預設的 content type\n例如說下方結構圖中\npost-1的content type就是 post\ncontent └── post \u0026lt;-- Section, 在content下面第一層的資料夾/ └── post-1.md Section with Archetypes\nsection 特性可以搭派 hugo archetypes 使在特定section中建立的文章\n可以自動對照到相對應的文章樣板\n例如下方結構圖中，在archetypes中建立post資料夾與底下的default.md\n如此一來當你在post section建立文章時，他就會自動帶入該樣板了\narchetypes └── post └── default.md Content Type 在 section 有提到會依據 section 自動設定文章 type\n那如果這篇文章沒有沒有辦法自動帶入，也沒有手動設定的時候\n會有個預設值= page\ncontent └── post │ └── post-1.md └── about.md \u0026lt;-- 在content下，但沒有被放進任何資料夾中 (且文章中也沒有設定type) Layout設計 上面講了content的一些資訊究竟是要拿來做什麼的呢？\n這就要講到hugo layout\nhugo 提供我們設計layout模板渲染生成靜態html檔\n我們可以在layout中使用剛剛提到的 section 作為參數帶入 layout中\n(這邊我的理解是類似使用php blade寫網頁時在html帶入程式碼和參數，之後一次性產生靜態html檔)\n(不專業前端知識如有錯誤，請不要吝嗇告知修正)\n所以我們可以看一下 踩雷之路 (1) 所使用的theme是怎麼寫的吧！\n首先先來看這個檔案 m10c/layouts/_default/list.html\n{{ define \u0026quot;main\u0026quot; }} \u0026lt;article\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;ul class=\u0026quot;posts-list\u0026quot;\u0026gt; {{ range where .Paginator.Pages \u0026quot;Type\u0026quot; \u0026quot;!=\u0026quot; \u0026quot;page\u0026quot; }} \u0026lt;li class=\u0026quot;posts-list-item\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;posts-list-item-title\u0026quot; href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;span class=\u0026quot;posts-list-item-description\u0026quot;\u0026gt; {{ partial \u0026quot;icon.html\u0026quot; (dict \u0026quot;ctx\u0026quot; $ \u0026quot;name\u0026quot; \u0026quot;calendar\u0026quot;) }} {{ .PublishDate.Format \u0026quot;Jan 2, 2006\u0026quot; }} - {{ partial \u0026quot;icon.html\u0026quot; (dict \u0026quot;ctx\u0026quot; $ \u0026quot;name\u0026quot; \u0026quot;clock\u0026quot;) }} {{ .ReadingTime }} min read \u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ partial \u0026quot;pagination.html\u0026quot; $ }} \u0026lt;/article\u0026gt; {{ end }} 這份list.html中 {{ range where .Paginator.Pages \u0026quot;Type\u0026quot; \u0026quot;!=\u0026quot; \u0026quot;page\u0026quot; }}\n將所有 type != page 的文章做一個foreach的迴圈\n回到首頁 或是/posts頁就能看到文章列囉\n","id":6,"section":"posts","summary":"文章參數配置 相信大家在創建文章時都會看的這樣的文字在最前方 --- title: \u0026quot;菜雞部落客的hugo踩雷之路 ( 3 ) - 優化網站\u0026quot; date: 2022-08-06T23:37:05+08:00 draft: true ---","tags":["hugo"],"title":"菜雞部落客的hugo踩雷之路 ( 3 ) - Content 與 layout 的愛恨情仇","uri":"https://webberwu7.github.io/WebberWuBlog/2022/08/20220808-make-a-hugo-blog-2/","year":"2022"},{"content":"靜態網站 所謂靜態網頁，便是指超文件標示語言HyperText Markup Language，簡稱：HTML。是一種常與CSS及Javascript配合製作的網站建置基礎技術，網頁以純文字或圖片形式為主，內容固定、互動性差，且無後台資料庫。一般來說只要是網頁副檔名為html或htm，皆可辦定為靜態網頁。因爲靜態網頁的穩定性和無需連接資料庫，因此能快速開啟頁面，也更容易被搜索引擎檢索，所以許多人在編寫網頁時會將動態網頁、影像、動畫等轉變成靜態方式，就是所謂的“偽靜態網頁”，來提高搜尋引擎的友善度進而達到排名優化。\n[REF: 上網查到的說明]\nGitHub Pages https://pages.github.com/\nGitHub Pages是GitHub提供的一個網頁代管服務，於2008年推出[1][2]。可以用於存放靜態網頁，包括部落格、項目文檔[3][1]甚至整本書。[4]Jekyll軟體可以用於將文檔轉換成靜態網頁，該軟體提供了將網頁上傳到GitHub Pages的功能。[5]一般GitHub Pages的網站使用github.io的子域名，但是用戶也可以使用第三方域名。[6]\n[REF: Wiki]\n1. 先來 github 創建一個 repository 創建後先不要急著把專案上push上來\n停在這個頁面一下，我們需要先把hugo的config設定好再來上傳\n2. 設定hugo config baseUrl 至 github page Github Page的域名規則是這樣\nhttps://{github帳號}.github.io/{剛剛創建的repository}\n所以我們到config.toml檔設定\nbaseURL = 'https://webberwu7.github.io/WebberWuBlog' 設定改好後 hugo 更新一下!\nhugo 3. 推專案上 github 囉 先在hugo專案資料夾 git init 和設定對照的 github remote\ngit init git remote add origin git@github.com:webberwu7/WebberWuBlog.git commit \u0026amp; push\ngit add --all git commit -m \u0026quot;init hugo blog\u0026quot; git push origin master 4. 到github repository 中設定Github Page Setting -\u0026gt; Pages -\u0026gt; Source\n設定 deploy from a branch\nbranch 選擇 master /docs\n[踩到雷了！！ 趕緊補救一下] config.toml 加入 exportDir 設定\n因為hugo exportDir 預設是 public 資料夾\n但是github page 在上方第四步時只支援 /docs 資料夾中的資料\n因此我們需要在config.toml 檔加入\npublishDir = 'docs' 然後重新hugo製作一次\n之後把舊的public資料夾刪除掉\n5. Workflows 如果一切順利的話可以在 action 中看到跑完的綠色通過\n(前面的紅色就是踩到的一些雷)\n出發 前往部署成功的網站看看囉 https://{github帳號}.github.io/{剛剛創建的repository}\n","id":7,"section":"posts","summary":"靜態網站 所謂靜態網頁，便是指超文件標示語言HyperText Markup Language，簡稱：HTML。是一種常與CSS及Javascript配合製","tags":["hugo"],"title":"菜雞部落客的hugo踩雷之路 ( 2 ) - 部署到github上的靜態網站","uri":"https://webberwu7.github.io/WebberWuBlog/2022/08/20220806-make-a-hugo-blog-1/","year":"2022"},{"content":"什麼是 Hugo Hugo 是一個用 Go 編寫的靜態網站生成器，2013由 Steve Francia 原創，自 v0.14 (2015年) 由 Bjørn Erik Pedersen 主力開發[2]，並由全球各地的開發者和使用者提交貢獻。Hugo 以 Apache License 2.0 授權的開放原始碼專案。[3] Hugo 一般只需幾秒鐘就能生成一個網站（每頁少於 1 毫秒），被稱為「世界上最快的網站構建框架」，也使 Hugo 大受歡迎，成為最熱門的靜態網站生成器之一，被廣泛採用。 [REF: wiki]\n所以如果我們的網站類型是靜態網站的話，非常推薦使用hugo來建置\n1. 安裝Hugo 我這裡用的環境是 mac 且使用brew套件管理工具\nbrew install hugo 安裝後可以檢查一下版本 確認是否順利完成\nhugo version hugo version 結果圖\n➜ ~ hugo version hugo v0.101.0+extended darwin/amd64 BuildDate=unknown 2. 開啟一個hugo專案 安裝好後可以使用方便的 hugo 指令建立一個預設的 hugo網站\n# hugo new site {資料夾名稱} hugo new site webberwu_hugo 可以看到新增完後會在資料夾中長出這些東西\n├── archetypes ├── content ├── data ├── layouts ├── public │ ├── categories │ ├── css │ ├── make-a-hugo-blog │ ├── page │ └── tags ├── resources │ └── _gen ├── static └── themes └── hugo-theme-m10c # 下一步才會安裝的主題 剛新建時會是空的 3. 安裝漂亮的主題包 可以到這裡 https://themes.gohugo.io/\n選擇想要使用的主題進行安裝\n此篇文章要使用的是blog類型的\n目前使用這個 簡單風格的 m10c 主題\nhttps://themes.gohugo.io/themes/hugo-theme-m10c/\n# 進到hugo專案的資料夾中 cd [path] # 使用 git clone 下載安裝 git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c 接下來要到專案資料夾中的 config.toml\n加入theme=m10c\n代表我們現在要使用的主題是在themes中的哪個資料夾名稱\nconfig.toml 結果圖\nbaseURL = 'http://example.org/' languageCode = 'en-us' title = 'My New Hugo Site' theme = \u0026quot;m10c\u0026quot; 踩雷經驗 - git submodule 如果你要將專案部署上github page的時候\n沒有使用git submodule會使build過程失敗\n因此我們要在 專案資料夾中使用submodule\n新建一個檔案 .gitmodules\n並在裡面寫下\n[submodule \u0026quot;themes/m10c\u0026quot;] path = themes/m10c url = git@github.com:vaga/hugo-theme-m10c.git 4. 完成後就來試跑看看囉！ hugo 提供快速啟動網站伺服器的服務 不需要像傳統網站需要準備好apache或nginx等http伺服器 只需要簡單的打下指令 hugo server 就能啟動服務了\n# -D 是為了後面創建文章時要顯示草稿的頁面 hugo server -D 開個瀏覽器 看看畫面吧 http://localhost:1313\n5. 開始寫文章吧 可以使用 hugo指令 快速產生基礎的hugo文章頁\nhugo new make-a-hugo-blog.md 你會看到他幫你在content資料夾中新增一個檔案 make-a-hugo-blog.md\n內容如下\n--- title: \u0026quot;Make a Hugo Blog\u0026quot; date: 2022-08-06T13:20:02+08:00 draft: true --- draft: true 代表這篇文章是草稿，如果啟動 hugo server 沒有加上 -d 的參數就不會顯示出來 接下來我們在這個檔案中 用markdown的語法寫下文章的內容 例如說目前正在看的這篇\n--- title: \u0026quot;菜雞hugo踩雷之路\u0026quot; date: 2022-08-06T11:56:21+08:00 draft: true --- # 什麼是 Hugo Hugo 是一個用 Go ... 所以如果我們的網站類型是靜態網站的話，非常推薦使用hugo來建置 ## 1. 安裝Hugo 我這裡用的環境是 mac 且使用brew套件管理工具 . . . hugo server 即時查看結果\n編寫的過程中可以從剛剛啟動的 hugo server服務\nhttp://localhost:1313/{文章的檔案名稱}\nhttp://localhost:1313/make-a-hugo-blog/\n踩雷經驗 - hugo publishDir 調整 再輸入指令hugo產生靜態檔案之前\n如果你未來想將網站發佈到github page的話\n需要在 config.toml 多加一個設定\npublishDir = 'docs' hugo預設的靜態檔資料夾是在public資料夾\n但是github page 預設讀取的資料夾名稱是 docs\n內容寫完也確認無誤後\n輸入 hugo 指令編譯產生靜態檔\nhugo 你就會在 public資料夾中看到你新增的頁面囉 (如果有設定publishDir=\u0026lsquo;docs\u0026rsquo; 則會在docs資料夾中看到)\n下集待續 下一集將實作Hugo上傳至github靜態頁面\n參考文章 https://blog.10oz.tw/20200124-make-a-hugo-blog/\n其他筆記 tree 顯示漂亮的資料夾結構 brew install tree 基本使用方法\n# -d 顯示目前目錄下所有dir名稱 tree -d # -L 往下找幾層 tree -d -L 2 ","id":8,"section":"posts","summary":"什麼是 Hugo Hugo 是一個用 Go 編寫的靜態網站生成器，2013由 Steve Francia 原創，自 v0.14 (2015年) 由 Bjørn Erik Pedersen 主力開發[2]，並由全球各地的開發者和使用者","tags":["hugo"],"title":"菜雞部落客的hugo踩雷之路 ( 1 ) - 建立hugo專案與新增文章","uri":"https://webberwu7.github.io/WebberWuBlog/2022/08/20220806-make-a-hugo-blog/","year":"2022"}],"tags":[{"title":"bigquery","uri":"https://webberwu7.github.io/WebberWuBlog/tags/bigquery/"},{"title":"conference","uri":"https://webberwu7.github.io/WebberWuBlog/tags/conference/"},{"title":"docker","uri":"https://webberwu7.github.io/WebberWuBlog/tags/docker/"},{"title":"hugo","uri":"https://webberwu7.github.io/WebberWuBlog/tags/hugo/"},{"title":"laravel","uri":"https://webberwu7.github.io/WebberWuBlog/tags/laravel/"},{"title":"php","uri":"https://webberwu7.github.io/WebberWuBlog/tags/php/"},{"title":"plugin","uri":"https://webberwu7.github.io/WebberWuBlog/tags/plugin/"},{"title":"python","uri":"https://webberwu7.github.io/WebberWuBlog/tags/python/"},{"title":"wordpress","uri":"https://webberwu7.github.io/WebberWuBlog/tags/wordpress/"}]}